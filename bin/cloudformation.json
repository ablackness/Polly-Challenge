{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Send text to Polly to save an audio file to S3 (v1.0-DEV)",
  "Parameters": {
    "Secrets": {
      "Type": "String",
      "Description": "Secret Keys (ARNs)",
      "Default": ""
    },
    "XRayTracing": {
      "Type": "String",
      "Description": "AWS X-Ray Tracing Mode",
      "AllowedValues": [
        "Active",
        "PassThrough"
      ],
      "Default": "PassThrough"
    },
    "LambdaSharpCoreDeadLetterQueue": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::DeadLetterQueue",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::DeadLetterQueue"
    },
    "LambdaSharpCoreLoggingStream": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::LoggingStream",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::LoggingStream"
    },
    "LambdaSharpCoreLoggingStreamRole": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::LoggingStreamRole",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::LoggingStreamRole"
    },
    "LambdaSharpCoreDefaultSecretKey": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::DefaultSecretKey",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::DefaultSecretKey"
    },
    "DeploymentBucketName": {
      "Type": "String",
      "Description": "Deployment S3 Bucket Name"
    },
    "DeploymentPrefix": {
      "Type": "String",
      "Description": "Deployment Tier Prefix"
    },
    "DeploymentPrefixLowercase": {
      "Type": "String",
      "Description": "Deployment Tier Prefix (lowercase)"
    },
    "DeploymentRoot": {
      "Type": "String",
      "Description": "Root Stack Name",
      "Default": ""
    },
    "DeploymentChecksum": {
      "Type": "String",
      "Description": "Deployment Checksum",
      "Default": "49C9078D1A2696413B88CDB1B9BE4816"
    }
  },
  "Resources": {
    "ArticlesBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "PollyFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3Key": "LambdaSharpChallenge/Modules/PollyToS3Module/Assets/function_PollyFunction_0CA9AC514D44DA76F4D1A15B8C22132E.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::If": [
              "LambdaSharpCoreDeadLetterQueueIsImported",
              {
                "Fn::ImportValue": {
                  "Fn::Sub": [
                    "${DeploymentPrefix}${Import}",
                    {
                      "Import": {
                        "Fn::Select": [
                          "1",
                          {
                            "Fn::Split": [
                              "$",
                              {
                                "Ref": "LambdaSharpCoreDeadLetterQueue"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "Ref": "LambdaSharpCoreDeadLetterQueue"
              }
            ]
          }
        },
        "Description": "Endpoints to send text to Polly to save to a S3 bucket (v1.0-DEV)",
        "Environment": {
          "Variables": {
            "MODULE_ID": {
              "Ref": "AWS::StackName"
            },
            "MODULE_INFO": "LambdaSharpChallenge.PollyToS3Module:1.0-DEV",
            "LAMBDA_NAME": "PollyFunction",
            "LAMBDA_RUNTIME": "dotnetcore2.1",
            "DEADLETTERQUEUE": {
              "Fn::If": [
                "LambdaSharpCoreDeadLetterQueueIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpCoreDeadLetterQueue"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpCoreDeadLetterQueue"
                }
              ]
            },
            "DEFAULTSECRETKEY": {
              "Fn::If": [
                "LambdaSharpCoreDefaultSecretKeyIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpCoreDefaultSecretKey"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpCoreDefaultSecretKey"
                }
              ]
            },
            "STR_POLLYPERMISSIONS": "*",
            "STR_ARTICLESBUCKET": {
              "Fn::GetAtt": [
                "ArticlesBucket",
                "Arn"
              ]
            },
            "STR_ARTICLEAUDIODONE": {
              "Ref": "ArticleAudioDone"
            }
          }
        },
        "Handler": "PollyFunction::LambdaSharpChallenge.PollyToS3Module.Function::FunctionHandlerAsync",
        "MemorySize": "512",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore2.1",
        "Timeout": "30",
        "TracingConfig": {
          "Mode": {
            "Ref": "XRayTracing"
          }
        }
      }
    },
    "PollyFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${PollyFunction}"
        },
        "RetentionInDays": 30
      }
    },
    "ArticleBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ArticlesBucket"
        },
        "PolicyDocument": {
          "Id": "ArticlesBucket",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadForGetBucketObjects",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::Sub": "${ArticlesBucket.Arn}/*"
              }
            }
          ]
        }
      }
    },
    "ArticleAudioDone": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": "+15627062229",
            "Protocol": "SMS"
          }
        ],
        "TopicName": "AudioDone"
      }
    },
    "ModuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ModuleLambdaPrincipal",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "PollyPermissions",
                  "Effect": "Allow",
                  "Action": [
                    "polly:DescribeVoices",
                    "polly:SynthesizeSpeech"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "ArticlesBucket",
                  "Effect": "Allow",
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:CreateBucket",
                    "s3:DeleteObject",
                    "s3:DeleteObjectTagging",
                    "s3:DeleteObjectVersion",
                    "s3:DeleteObjectVersionTagging",
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:GetObjectTagging",
                    "s3:GetObjectTorrent",
                    "s3:GetObjectVersion",
                    "s3:GetObjectVersionAcl",
                    "s3:GetObjectVersionTagging",
                    "s3:GetObjectVersionTorrent",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListMultipartUploadParts",
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:PutObjectTagging",
                    "s3:PutObjectVersionAcl",
                    "s3:PutObjectVersionTagging",
                    "s3:RestoreObject"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ArticlesBucket",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "ArticlesBucket",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "ArticleAudioDone",
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {
                    "Ref": "ArticleAudioDone"
                  }
                },
                {
                  "Sid": "ModuleDeadLetterQueueLogging",
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage"
                  ],
                  "Resource": {
                    "Fn::If": [
                      "LambdaSharpCoreDeadLetterQueueIsImported",
                      {
                        "Fn::ImportValue": {
                          "Fn::Sub": [
                            "${DeploymentPrefix}${Import}",
                            {
                              "Import": {
                                "Fn::Select": [
                                  "1",
                                  {
                                    "Fn::Split": [
                                      "$",
                                      {
                                        "Ref": "LambdaSharpCoreDeadLetterQueue"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "Ref": "LambdaSharpCoreDeadLetterQueue"
                      }
                    ]
                  }
                },
                {
                  "Sid": "SecretsDecryption",
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt",
                    "kms:Encrypt",
                    "kms:GenerateDataKey",
                    "kms:GenerateDataKeyWithoutPlaintext"
                  ],
                  "Resource": {
                    "Fn::Split": [
                      ",",
                      {
                        "Fn::If": [
                          "SecretsIsEmpty",
                          {
                            "Fn::If": [
                              "LambdaSharpCoreDefaultSecretKeyIsImported",
                              {
                                "Fn::ImportValue": {
                                  "Fn::Sub": [
                                    "${DeploymentPrefix}${Import}",
                                    {
                                      "Import": {
                                        "Fn::Select": [
                                          "1",
                                          {
                                            "Fn::Split": [
                                              "$",
                                              {
                                                "Ref": "LambdaSharpCoreDefaultSecretKey"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "Ref": "LambdaSharpCoreDefaultSecretKey"
                              }
                            ]
                          },
                          {
                            "Fn::Join": [
                              ",",
                              [
                                {
                                  "Fn::If": [
                                    "LambdaSharpCoreDefaultSecretKeyIsImported",
                                    {
                                      "Fn::ImportValue": {
                                        "Fn::Sub": [
                                          "${DeploymentPrefix}${Import}",
                                          {
                                            "Import": {
                                              "Fn::Select": [
                                                "1",
                                                {
                                                  "Fn::Split": [
                                                    "$",
                                                    {
                                                      "Ref": "LambdaSharpCoreDefaultSecretKey"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "Ref": "LambdaSharpCoreDefaultSecretKey"
                                    }
                                  ]
                                },
                                {
                                  "Ref": "Secrets"
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "Sid": "ModuleLogStreamAccess",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "AWSXRayWriteAccess",
                  "Effect": "Allow",
                  "Action": [
                    "xray:GetSamplingRules",
                    "xray:GetSamplingStatisticSummaries",
                    "xray:GetSamplingTargets",
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}ModulePolicy"
            }
          }
        ]
      }
    },
    "ModuleRegistration": {
      "Type": "Custom::LambdaSharpRegistrationModule",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": {
            "Fn::Sub": "${DeploymentPrefix}LambdaSharp::Registration::Module"
          }
        },
        "ResourceType": "LambdaSharp::Registration::Module",
        "Module": "LambdaSharpChallenge.PollyToS3Module:1.0-DEV",
        "ModuleId": {
          "Ref": "AWS::StackName"
        }
      }
    },
    "PollyFunctionRegistration": {
      "Type": "Custom::LambdaSharpRegistrationFunction",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": {
            "Fn::Sub": "${DeploymentPrefix}LambdaSharp::Registration::Function"
          }
        },
        "ResourceType": "LambdaSharp::Registration::Function",
        "ModuleId": {
          "Ref": "AWS::StackName"
        },
        "FunctionId": {
          "Ref": "PollyFunction"
        },
        "FunctionName": "PollyFunction",
        "FunctionLogGroupName": {
          "Fn::Sub": "/aws/lambda/${PollyFunction}"
        },
        "FunctionPlatform": "AWS Lambda",
        "FunctionFramework": "dotnetcore2.1",
        "FunctionLanguage": "csharp",
        "FunctionMaxMemory": "512",
        "FunctionMaxDuration": "30"
      },
      "DependsOn": [
        "ModuleRegistration"
      ]
    },
    "PollyFunctionLogGroupSubscription": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": {
          "Fn::If": [
            "LambdaSharpCoreLoggingStreamIsImported",
            {
              "Fn::ImportValue": {
                "Fn::Sub": [
                  "${DeploymentPrefix}${Import}",
                  {
                    "Import": {
                      "Fn::Select": [
                        "1",
                        {
                          "Fn::Split": [
                            "$",
                            {
                              "Ref": "LambdaSharpCoreLoggingStream"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "Ref": "LambdaSharpCoreLoggingStream"
            }
          ]
        },
        "FilterPattern": "-\"*** \"",
        "LogGroupName": {
          "Ref": "PollyFunctionLogGroup"
        },
        "RoleArn": {
          "Fn::If": [
            "LambdaSharpCoreLoggingStreamRoleIsImported",
            {
              "Fn::ImportValue": {
                "Fn::Sub": [
                  "${DeploymentPrefix}${Import}",
                  {
                    "Import": {
                      "Fn::Select": [
                        "1",
                        {
                          "Fn::Split": [
                            "$",
                            {
                              "Ref": "LambdaSharpCoreLoggingStreamRole"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "Ref": "LambdaSharpCoreLoggingStreamRole"
            }
          ]
        }
      }
    },
    "ModuleRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "${Module::FullName} API (v${Module::Version})",
        "FailOnWarnings": true,
        "Name": {
          "Fn::Sub": "${AWS::StackName} Module API"
        }
      }
    },
    "ModuleRestApiArticlesResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ModuleRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "articles",
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      }
    },
    "ModuleRestApiArticlesResourcePOST": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": "#set($root = $input.path('$'))\n#set($context.responseOverride.status = $root.statusCode)\n#if($root.headers)\n#foreach($header in $root.headers.keySet())\n#set($context.responseOverride.header[$header] = $root.headers.get($header))\n#end\n#end\n#if($root.multiValueHeaders)\n#foreach($header in $root.multiValueHeaders.keySet())\n#set($context.responseOverride.header[$header] = $root.multiValueHeaders.get($header))\n#end\n#end\n$root.body"
              },
              "StatusCode": 200
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "#set($allParams = $input.params())\n#set($headers = $input.params().header)\n#set($queryStringParameters = $input.params().querystring)\n#set($pathParameters = $input.params().path)\n{\n\"resource\": \"$context.resourcePath\",\n\"path\": \"$context.path\",\n\"httpMethod\": \"$context.httpMethod\",\n\"headers\": {\n#foreach($key in $headers.keySet())\n\"$key\": \"$util.escapeJavaScript($headers.get($key))\"\n#if($foreach.hasNext),#end\n#end\n},\n#if($querystrings.size() > 0)\n\"queryStringParameters\": {\n#foreach($key in $queryStringParameters.keySet())\n\"$key\": \"$util.escapeJavaScript($queryStringParameters.get($key))\"\n#if($foreach.hasNext),#end\n#end\n},\n#else\n\"queryStringParameters\": null,\n#end\n#if($pathParameters.size() > 0)\n\"pathParameters\": {\n#foreach($key in $pathParameters.keySet())\n\"$key\": \"$util.escapeJavaScript($pathParameters.get($key))\"\n#if($foreach.hasNext),#end\n#end\n},\n#else\n\"pathParameters\": null,\n#end\n#if($stageVariables.size() > 0)\n\"stageVariables\": {\n#foreach($key in $stageVariables.keySet())\n\"$key\": \"$util.escapeJavaScript($stageVariables.get($key))\"\n#if($foreach.hasNext),#end\n#end\n},\n#else\n\"stageVariables\": null,\n#end\n\"requestContext\": {\n\"resourceId\": \"$context.resourceId\",\n\"resourcePath\": \"$context.resourcePath\",\n\"httpMethod\": \"$context.httpMethod\",\n\"extendedRequestId\": \"$context.extendedRequestId\",\n\"path\": \"$context.path\",\n\"accountId\": \"$context.accountId\",\n\"stage\": \"$context.stage\",\n\"domainPrefix\": \"$context.domainPrefix\",\n\"requestId\": \"$context.requestId\",\n\"identity\": {\n\"cognitoIdentityPoolId\":#if($context.identity.cognitoIdentityPoolId.isEmpty()) null#else \"$context.identity.cognitoIdentityPoolId\"#end,\n\"accountId\":#if($context.identity.accountId.isEmpty()) null#else \"$context.identity.accountId\"#end,\n\"cognitoIdentityId\":#if($context.identity.cognitoIdentityId.isEmpty()) null#else \"$context.identity.cognitoIdentityId\"#end,\n\"caller\":#if($context.identity.caller.isEmpty()) null#else \"$context.identity.caller\"#end,\n\"sourceIp\":#if($context.identity.sourceIp.isEmpty()) null#else \"$context.identity.sourceIp\"#end,\n\"accessKey\":#if($context.identity.accessKey.isEmpty()) null#else \"$context.identity.accessKey\"#end,\n\"cognitoAuthenticationType\":#if($context.identity.cognitoAuthenticationType.isEmpty()) null#else \"$context.identity.cognitoAuthenticationType\"#end,\n\"cognitoAuthenticationProvider\":#if($context.identity.cognitoAuthenticationProvider.isEmpty()) null#else \"$context.identity.cognitoAuthenticationProvider\"#end,\n\"userArn\":#if($context.identity.userArn.isEmpty()) null#else \"$context.identity.userArn\"#end,\n\"userAgent\":#if($context.identity.userAgent.isEmpty()) null#else \"$context.identity.userAgent\"#end,\n\"user\":#if($context.identity.user.isEmpty()) null#else \"$context.identity.user\"#end,\n\"apiKey\":#if($context.identity.apiKey.isEmpty()) null#else \"$context.identity.apiKey\"#end,\n\"apiKeyId\":#if($context.identity.apiKeyId.isEmpty()) null#else \"$context.identity.apiKeyId\"#end\n},\n\"domainName\": \"$context.domainName\",\n\"apiId\": \"$context.apiId\"\n},\n\"body\": \"$util.escapeJavaScript($input.body)\",\n\"isBase64Encoded\": false\n}"
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PollyFunction.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": {
                "Ref": "ModuleRestApiArticlesResourcePOSTResponseModel"
              }
            },
            "StatusCode": 200
          }
        ],
        "OperationName": "AddItem",
        "RequestModels": {
          "application/json": {
            "Ref": "ModuleRestApiArticlesResourcePOSTRequestModel"
          }
        },
        "RequestValidatorId": {
          "Ref": "ModuleRestApiRequestValidator"
        },
        "ResourceId": {
          "Ref": "ModuleRestApiArticlesResource"
        },
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      }
    },
    "ModuleRestApiArticlesResourcePOSTRequestModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "AddItemRequest",
        "RestApiId": {
          "Ref": "ModuleRestApi"
        },
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "ConvertTextRequest",
          "type": "object",
          "required": [
            "Language",
            "Uri"
          ],
          "properties": {
            "Language": {
              "type": "string"
            },
            "Uri": {
              "type": "string"
            }
          }
        }
      }
    },
    "ModuleRestApiArticlesResourcePOSTResponseModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "AddItemResponse",
        "RestApiId": {
          "Ref": "ModuleRestApi"
        },
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "ConvertTextResponse",
          "type": "object",
          "required": [
            "FileName",
            "Voice"
          ],
          "properties": {
            "FileName": {
              "type": "string"
            },
            "Voice": {
              "type": "string"
            }
          }
        }
      }
    },
    "ModuleRestApiArticlesResourcePOSTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "PollyFunction",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ModuleRestApi}/LATEST/POST/articles"
        }
      }
    },
    "ModuleRestApiRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "RestApiId": {
          "Ref": "ModuleRestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true
      }
    },
    "ModuleRestApiRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ModuleRestApiPrincipal",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "ModuleRestApiLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}ModuleRestApiPolicy"
            }
          }
        ]
      }
    },
    "ModuleRestApiLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "API-Gateway-Execution-Logs_${ModuleRestApi}/LATEST"
        },
        "RetentionInDays": 30
      }
    },
    "ModuleRestApiAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ModuleRestApiRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ModuleRestApiLogGroup"
      ]
    },
    "ModuleRestApiDeployment4BD898C8367C83A2490E1C0D5FB300C4": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": {
          "Fn::Sub": "${AWS::StackName} API [4BD898C8367C83A2490E1C0D5FB300C4]"
        },
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      },
      "DependsOn": [
        "ModuleRestApiArticlesResourcePOST",
        "ModuleRestApiArticlesResourcePOSTRequestModel",
        "ModuleRestApiArticlesResourcePOSTResponseModel"
      ]
    },
    "ModuleRestApiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ModuleRestApiDeployment4BD898C8367C83A2490E1C0D5FB300C4"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "RestApiId": {
          "Ref": "ModuleRestApi"
        },
        "StageName": "LATEST"
      },
      "DependsOn": [
        "ModuleRestApiAccount"
      ]
    }
  },
  "Outputs": {
    "Module": {
      "Value": "LambdaSharpChallenge.PollyToS3Module:1.0-DEV"
    }
  },
  "Conditions": {
    "SecretsIsEmpty": {
      "Fn::Equals": [
        {
          "Ref": "Secrets"
        },
        ""
      ]
    },
    "LambdaSharpCoreDeadLetterQueueIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreDeadLetterQueue"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreDeadLetterQueue"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpCoreLoggingStreamIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreLoggingStream"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreLoggingStream"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpCoreLoggingStreamRoleIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreLoggingStreamRole"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreLoggingStreamRole"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpCoreDefaultSecretKeyIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreDefaultSecretKey"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreDefaultSecretKey"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterLabels": {
        "Secrets": {
          "default": "Comma-separated list of additional KMS secret keys [String]"
        },
        "XRayTracing": {
          "default": "AWS X-Ray tracing mode for module functions [String]"
        },
        "LambdaSharpCoreDeadLetterQueue": {
          "default": "DeadLetterQueue [String]"
        },
        "LambdaSharpCoreLoggingStream": {
          "default": "LoggingStream [String]"
        },
        "LambdaSharpCoreLoggingStreamRole": {
          "default": "LoggingStreamRole [String]"
        },
        "LambdaSharpCoreDefaultSecretKey": {
          "default": "DefaultSecretKey [String]"
        },
        "DeploymentBucketName": {
          "default": "Deployment S3 bucket name [String]"
        },
        "DeploymentPrefix": {
          "default": "Deployment tier prefix [String]"
        },
        "DeploymentPrefixLowercase": {
          "default": "Deployment tier prefix (lowercase) [String]"
        },
        "DeploymentRoot": {
          "default": "Root stack name for nested deployments, blank otherwise [String]"
        },
        "DeploymentChecksum": {
          "default": "CloudFormation template MD5 checksum [String]"
        }
      },
      "ParameterGroups": [
        {
          "Label": {
            "default": "LambdaSharp Module Options"
          },
          "Parameters": [
            "Secrets",
            "XRayTracing"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp.Core Imports"
          },
          "Parameters": [
            "LambdaSharpCoreDeadLetterQueue",
            "LambdaSharpCoreLoggingStream",
            "LambdaSharpCoreLoggingStreamRole",
            "LambdaSharpCoreDefaultSecretKey"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Deployment Settings (DO NOT MODIFY)"
          },
          "Parameters": [
            "DeploymentBucketName",
            "DeploymentPrefix",
            "DeploymentPrefixLowercase",
            "DeploymentRoot",
            "DeploymentChecksum"
          ]
        }
      ]
    },
    "LambdaSharp::Manifest": {
      "Version": "2018-12-31",
      "Module": "LambdaSharpChallenge.PollyToS3Module:1.0-DEV",
      "ParameterSections": [
        {
          "Title": "LambdaSharp Module Options",
          "Parameters": [
            {
              "Name": "Secrets",
              "Type": "String",
              "Label": "Comma-separated list of additional KMS secret keys",
              "Default": ""
            },
            {
              "Name": "XRayTracing",
              "Type": "String",
              "Label": "AWS X-Ray tracing mode for module functions",
              "Default": "PassThrough"
            }
          ]
        },
        {
          "Title": "LambdaSharp.Core Imports",
          "Parameters": [
            {
              "Name": "LambdaSharpCoreDeadLetterQueue",
              "Type": "String",
              "Label": "DeadLetterQueue",
              "Default": "$LambdaSharp-Core::DeadLetterQueue",
              "Import": "LambdaSharp.Core::DeadLetterQueue"
            },
            {
              "Name": "LambdaSharpCoreLoggingStream",
              "Type": "String",
              "Label": "LoggingStream",
              "Default": "$LambdaSharp-Core::LoggingStream",
              "Import": "LambdaSharp.Core::LoggingStream"
            },
            {
              "Name": "LambdaSharpCoreLoggingStreamRole",
              "Type": "String",
              "Label": "LoggingStreamRole",
              "Default": "$LambdaSharp-Core::LoggingStreamRole",
              "Import": "LambdaSharp.Core::LoggingStreamRole"
            },
            {
              "Name": "LambdaSharpCoreDefaultSecretKey",
              "Type": "String",
              "Label": "DefaultSecretKey",
              "Default": "$LambdaSharp-Core::DefaultSecretKey",
              "Import": "LambdaSharp.Core::DefaultSecretKey"
            }
          ]
        }
      ],
      "RuntimeCheck": true,
      "Hash": "49C9078D1A2696413B88CDB1B9BE4816",
      "Git": {
        "Branch": "master",
        "SHA": "45731e87e40bd8d4ebb6908e768f6a4addfb3523"
      },
      "Assets": [
        "function_PollyFunction_0CA9AC514D44DA76F4D1A15B8C22132E.zip"
      ],
      "Dependencies": [
        {
          "ModuleFullName": "LambdaSharp.Core",
          "MinVersion": "0.6-RC1"
        }
      ],
      "ResourceNameMappings": {
        "PollyFunctionLogGroup": "PollyFunction::LogGroup",
        "ModuleRole": "Module::Role",
        "ModuleRegistration": "Module::Registration",
        "PollyFunctionRegistration": "PollyFunction::Registration",
        "PollyFunctionLogGroupSubscription": "PollyFunction::LogGroupSubscription",
        "ModuleRestApi": "Module::RestApi",
        "ModuleRestApiArticlesResource": "Module::RestApi::ArticlesResource",
        "ModuleRestApiArticlesResourcePOST": "Module::RestApi::ArticlesResource::POST",
        "ModuleRestApiArticlesResourcePOSTRequestModel": "Module::RestApi::ArticlesResource::POST::RequestModel",
        "ModuleRestApiArticlesResourcePOSTResponseModel": "Module::RestApi::ArticlesResource::POST::ResponseModel",
        "ModuleRestApiArticlesResourcePOSTPermission": "Module::RestApi::ArticlesResource::POST::Permission",
        "ModuleRestApiRequestValidator": "Module::RestApi::RequestValidator",
        "ModuleRestApiRole": "Module::RestApi::Role",
        "ModuleRestApiLogGroup": "Module::RestApi::LogGroup",
        "ModuleRestApiAccount": "Module::RestApi::Account",
        "ModuleRestApiDeployment4BD898C8367C83A2490E1C0D5FB300C4": "Module::RestApi::Deployment4BD898C8367C83A2490E1C0D5FB300C4",
        "ModuleRestApiStage": "Module::RestApi::Stage"
      },
      "TypeNameMappings": {
        "Custom::LambdaSharpRegistrationModule": "LambdaSharp::Registration::Module",
        "Custom::LambdaSharpRegistrationFunction": "LambdaSharp::Registration::Function"
      }
    }
  }
}